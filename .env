# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

DATABASE_URL= "mongodb+srv://usman:usman@cluster0.tu7pnzi.mongodb.net/task-mangement"


# Promise.resolve('Success!')
#   .then(() => {
#     throw Error('Oh noes!')
#   })
#   .catch(error => {
#     return 'actually, that worked'
#   })
#   .then(data => {
#     throw Error('The fails!')
#   })
#   .catch(error => console.log(error.message))	

#  async function f() {
#    let result = 'first!';
#    let promise = new Promise((resolve, reject) => {
#      setTimeout(() => resolve('done!'), 1000);
#    });


#    result = await promise;
#    console.log(result);
#  }


#  f();


# let dog = {
#     breed: "Border Collie",
#     sound: "Wooh",
#     getBreed: () => { 
#         return this.breed;
#     },
#     getSound: function() {
#         return this.sound;
#     }
# };
# console.log(dog.getBreed(), dog.getSound());

# import {Component, Input, Output} from '@angular/core';


# @Component({
#   selector: 'animal-noise',
#   template: `
#     <span>{{animal}}</span>
#     <button (click)="makeNoise()">Make noise</button>
#   `
# })
# export class AnimalNoise {
#   @Input('animal') animal: string;
#   @Input('noise') noise: string;


#   makeNoise() {
#     alert(`${this.noise}`);
#   }
# }


# var addSix = createBase(6);
# addSix(10); // returns 16
# addSix(21); // returns 27



# const arr = [10, 12, 15, 21];
# for (var i = 0; i < arr.length; i++) {
#   setTimeout(function() {
#     console.log('Index: ' + i + ', element: ' + arr[i]);
#   }, 3000);
# }


# <!DOCTYPE html>
# <html>
#   <head>
#     <meta charset="utf-8">
#     <title>Company page</title>
#   </head>
#   <body>
#     <paragraph>Welcome! Here you can find the following things:</paragraph>
#     <ol>
#       <em><li><a href="#logo">Company's logo</a></li></em>
#       <li><a href="#employees">List of employees</a></li>
#     </ol>


#     <h1>Company's logo
#     <paragraph>Company uses the following logos:</paragraph>
#     <ul>
#   	    <li>New logo:</li> <img source="https://bit.ly/3A4wNcD" />
#       <li>Old logo:</li> <img source="https://bit.ly/3xlFQ7l" />
#     </ul>


#     <h1>List of employees
#     <thead>
#       <th>First name</th>
#       <th>Last name</th>
#     </thead>
#     <table>
#       <tr>
#         <td>Mary</td>
#         <td>Williams</td>
#       </tr>
#       <tr>
#         <td>James</td>
#         <td>Smith</td>
#       </tr>
#     </table>
#   </body>
#  </html>

# .large .navigation.navigation-large { 
#     font-size: 2em;
# }


# .navigation {
#     font-size: 3em !important;
# }

# // Component D
# class D extends Component {
#   render() {
#     return <div>{this.props.user}</div>;
#   }
# }


# // Component C
# class C extends Component {
#   render() {
#     return (
#       <div>
#         <D user={this.props.user} />
#       </div>
#     );
#   }
# }
# // Component B
# class B extends Component {
#   render() {
#     return (
#       <div>
#         <C user={this.props.user} />
#       </div>
#     );
#   }
# }
# // Component A
# export class A extends Component {
#   state = {
#     user: "Backbencher",
#   };
#   render() {
#     return (
#       <div>
#         <B user={this.state.user} />
#       </div>
#     );
#   }
# }

# function createStack() {
#   return {
#     items: [],
#     push(item) {
#       this.items.push(item);
#     },
#     pop() {
#       return this.items.pop();
#     }
#   };
# }
# const stack = createStack();
# stack.push(10);
# stack.push(5);
# stack.pop(); // => 5
# stack.items; // => [10]
# stack.items = [10, 100, 1000];// Encapsulation broken!
